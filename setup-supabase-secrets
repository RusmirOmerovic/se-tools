#!/usr/bin/env bash
# setup-supabase-secrets ‚Äì einmalig durch Admin ausf√ºhren
# Speichert SUPABASE_URL & SUPABASE_SERVICE_ROLE sicher und validiert sie VOR dem Speichern
set -euo pipefail
IFS=$'\n\t'

SVC_URL="SUPABASE_URL"
SVC_ROLE="SUPABASE_SERVICE_ROLE"

detect_os() {
  case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    darwin*)   echo "macos" ;;
    linux*)    echo "linux" ;;
    msys*|mingw*|cygwin*) echo "windows" ;;
    *)         echo "unknown" ;;
  esac
}

trim_ws() { sed -E 's/^[[:space:]]+//; s/[[:space:]]+$//'; }

prompt_secret() { local var; read -r -p "$1: " var; printf '%s' "$var" | tr -d '\r\n' | trim_ws; }
prompt_secret_hidden() { local var; read -r -s -p "$1: " var; echo; printf '%s' "$var" | tr -d '\r\n' | trim_ws; }

store_macos() {
  local url="$1" role="$2"
  security add-generic-password -a "$USER" -s "$SVC_URL"  -w "$url"  -U >/dev/null 2>&1 || true
  security add-generic-password -a "$USER" -s "$SVC_ROLE" -w "$role" -U >/dev/null 2>&1 || true
  echo "üîê Gespeichert in macOS Keychain."
}

store_linux() {
  local url="$1" role="$2"
  if command -v secret-tool >/dev/null 2>&1; then
    printf %s "$url"  | secret-tool store --label='se-tools' service "$SVC_URL"  account "$USER"
    printf %s "$role" | secret-tool store --label='se-tools' service "$SVC_ROLE" account "$USER"
    echo "üîê Gespeichert in Secret Service (secret-tool)."
  else
    mkdir -p "$HOME/.config/se-tools"; chmod 700 "$HOME/.config/se-tools"
    umask 177
    printf %s "$url"  > "$HOME/.config/se-tools/${SVC_URL}.txt"
    printf %s "$role" > "$HOME/.config/se-tools/${SVC_ROLE}.txt"
    chmod 600 "$HOME/.config/se-tools/${SVC_URL}.txt" "$HOME/.config/se-tools/${SVC_ROLE}.txt"
    echo "‚ö†Ô∏è secret-tool nicht gefunden ‚Äì als 600-Dateien abgelegt (Fallback)."
  fi
}

store_windows() {
  local url="$1" role="$2"
  local ps='
    param([string]$Url,[string]$Role)
    New-Item -ItemType Directory -Force $env:APPDATA\se-tools | Out-Null
    $secU = ConvertTo-SecureString $Url  -AsPlainText -Force
    $encU = $secU | ConvertFrom-SecureString
    Set-Content $env:APPDATA\se-tools\SUPABASE_URL.txt $encU
    $secR = ConvertTo-SecureString $Role -AsPlainText -Force
    $encR = $secR | ConvertFrom-SecureString
    Set-Content $env:APPDATA\se-tools\SUPABASE_SERVICE_ROLE.txt $encR
  '
  powershell.exe -NoProfile -Command "$ps" -Url "$url" -Role "$role" >/dev/null 2>&1 || {
    echo "‚ùå PowerShell-Aufruf fehlgeschlagen."; exit 1;
  }
  echo "üîê Gespeichert mit DPAPI in %APPDATA%\\se-tools\\*.txt"
}

auth_ping() {
  # $1 = url, $2 = key
  curl -s -o /dev/null -w "%{http_code}" \
    -H "apikey: $2" -H "Authorization: Bearer $2" \
    "$1/rest/v1/user_profiles?select=id&limit=1"
}

validate_ref_best_effort() {
  # $1 = url, $2 = key
  command -v jq >/dev/null 2>&1 || return 0
  local url="$1" key="$2" os decode_cmd payload ref_expected ref_actual
  url="${url%/}"
  ref_expected="$(echo "$url" | sed -E 's#https?://([^./]+)\.supabase\.co.*#\1#')"
  case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    darwin*) decode_cmd="base64 -D" ;;
    *)       decode_cmd="base64 -d" ;;
  esac
  payload="$(
    printf '%s' "$key" | awk -F. '{print $2}' | tr '_-' '/+' \
    | awk '{l=(4 - (length % 4)) % 4; while(l-->0) printf "="; print}' \
    | eval "$decode_cmd" 2>/dev/null || true
  )"
  [[ -z "$payload" ]] && return 0
  ref_actual="$(echo "$payload" | jq -r '.ref // empty' 2>/dev/null || true)"
  [[ -z "$ref_actual" || "$ref_actual" == "$ref_expected" ]]
}

main() {
  local OS="$(detect_os)"
  if [[ "$OS" == "unknown" ]]; then echo "‚ùå Nicht unterst√ºtztes OS."; exit 1; fi

  echo "‚Üí Supabase-Parameter einmalig setzen (nur Admin):"
  local URL ROLE
  URL="$(prompt_secret 'SUPABASE_URL (z.B. https://<your>.supabase.co)')"
  ROLE="$(prompt_secret_hidden 'SUPABASE_SERVICE_ROLE (JWT)')"
  [[ -z "$URL" || -z "$ROLE" ]] && { echo "‚ùå Beide Werte erforderlich."; exit 1; }
  URL="${URL%/}"

  # 1) Best-effort Ref-Check (ohne hart zu failen bei fehlendem jq/base64)
  if ! validate_ref_best_effort "$URL" "$ROLE"; then
    echo "‚ùå Service-Role passt nicht zum Projekt-Ref in der URL. Bitte korrekten Key einf√ºgen."
    exit 1
  fi

  # 2) HARTE Pr√ºfung: Auth-Ping VOR dem Speichern
  local HTTP; HTTP="$(auth_ping "$URL" "$ROLE")"
  if [ "$HTTP" != "200" ]; then
    echo "‚ùå Supabase Auth-Check fehlgeschlagen (HTTP $HTTP). URL/Key passen nicht zusammen."
    echo "   Tipp: Kopiere den *Service Role* Key exakt aus Settings ‚Üí API des Projekts $(echo "$URL" | sed -E 's#https?://([^./]+)\.supabase\.co.*#\1#')."
    exit 1
  fi

  # 3) Speichern
  case "$OS" in
    macos)   store_macos "$URL" "$ROLE" ;;
    linux)   store_linux "$URL" "$ROLE" ;;
    windows) store_windows "$URL" "$ROLE" ;;
  esac

  # 4) Post-Store Sanity (sollte 200 sein)
  HTTP="$(auth_ping "$URL" "$ROLE")"
  if [ "$HTTP" != "200" ]; then
    echo "‚ùå Unerwartet: Auth-Check nach dem Speichern fehlgeschlagen (HTTP $HTTP)."
    exit 1
  fi

  echo "‚úÖ Validierung ok & gespeichert. Nutzer k√∂nnen jetzt mit 'projectnew <name>' Projekte anlegen."
}

main "$@"
