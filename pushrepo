#!/usr/bin/env bash
# pushrepo v2 ‚Äì Sicheres Commit+Push mit Schutz & Komfort

set -euo pipefail

# Farben
GREEN='\033[0;32m'; CYAN='\033[0;36m'; RED='\033[0;31m'; YELLOW='\033[1;33m'; NC='\033[0m'

# Flags
DRYRUN=false; QUIET=false; COMMIT_MSG=""
while getopts "nqm:" opt; do
  case $opt in
    n) DRYRUN=true ;;
    q) QUIET=true ;;
    m) COMMIT_MSG="$OPTARG" ;;
  esac
done

say(){ $QUIET || echo -e "$@"; }

# Repo/Branch
PROJECT_NAME=$(basename "$(pwd)")
BRANCH=$(git rev-parse --abbrev-ref HEAD)
say "${CYAN}üìÅ Projekt: ${PROJECT_NAME}  |  üåø Branch: ${BRANCH}${NC}"

# 1) Sicherheits-Check
SENSITIVE_PATTERNS=(".*\.env" ".*\.env\.local" ".*\.DS_Store" ".*\.key" "secrets/" ".*\.supabase/" ".*\.pem")
say "${CYAN}üîç Sicherheits-Check...${NC}"
ALL_FILES=$(git status --porcelain | awk '{print $2}')
for pattern in "${SENSITIVE_PATTERNS[@]}"; do
  if [[ -n "${ALL_FILES}" ]] && echo "$ALL_FILES" | grep -qE "$pattern"; then
    echo -e "${RED}üö´ Sicherheitswarnung: $pattern gefunden! Push abgebrochen.${NC}"
    exit 1
  fi
done
say "${GREEN}‚úÖ Sicherheits-Check bestanden.${NC}"

# Warnung bei sehr gro√üen Dateien (>25MB)
if git ls-files -s | awk '{print $4}' | xargs -I{} sh -c 'test -f "{}" && du -m "{}" | awk "{print \$1, \"$1\"}"' 2>/dev/null \
  | awk '$1>25{print}' | grep -q .; then
  echo -e "${YELLOW}‚ö†Ô∏è  Gro√üe Dateien (>25MB) im Repo entdeckt. Pr√ºfe LFS oder .gitignore.${NC}"
fi

# 2) √Ñnderungen hinzuf√ºgen
git add -A
if git diff --cached --quiet; then
  say "${YELLOW}‚ÑπÔ∏è  Keine √Ñnderungen ‚Äì Abbruch.${NC}"
  exit 0
fi

# 3) Commit
if [[ -z "$COMMIT_MSG" ]]; then
  read -r -p "üìù Commit-Nachricht (leer = automatisch): " msg
  COMMIT_MSG=${msg:-"üì¶ Update: $(date '+%Y-%m-%d %H:%M')"}
fi
$DRYRUN && { say "${YELLOW}üß™ Dry-run: Commit w√§re -> ${COMMIT_MSG}${NC}"; exit 0; }
git commit -m "$COMMIT_MSG"

# 4) Remote-Branch pr√ºfen
if ! git ls-remote --exit-code origin "$BRANCH" >/dev/null 2>&1; then
  say "${YELLOW}‚ÑπÔ∏è  Remote-Branch '$BRANCH' existiert nicht ‚Äì wird erstellt.${NC}"
  git push -u origin "$BRANCH"
  say "${GREEN}‚úÖ Push abgeschlossen (neuer Branch).${NC}"
  exit 0
fi

# 5) Rebase-Pull + Push
set +e
git pull --rebase origin "$BRANCH"
RC=$?
set -e
if [[ $RC -ne 0 ]]; then
  echo -e "${RED}‚ùå Rebase-Konflikt. Bitte Konflikte l√∂sen, dann erneut ausf√ºhren.${NC}"
  exit $RC
fi

git push origin "$BRANCH"
say "${GREEN}‚úÖ Push abgeschlossen!${NC}"
