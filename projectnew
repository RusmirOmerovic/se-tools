#!/usr/bin/env bash
# projectnew – Neues Projekt inkl. Supabase-Eintrag mit Debug-Hinweisen

set -e
GREEN='\033[0;32m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

TEMPLATE_REPO="https://github.com/RusmirOmerovic/html-template-se.git"
USERNAME="RusmirOmerovic"
GITHUB_API="https://api.github.com"

# === Token Handling wie gehabt ===
CONFIG_DIR="$HOME/.config/se-tools"
TOKEN_FILE="$CONFIG_DIR/gh_token.txt"
MAX_AGE=80
mkdir -p "$CONFIG_DIR" && chmod 700 "$CONFIG_DIR"

check_token() {
    if [[ -f "$TOKEN_FILE" ]]; then
        created=$(head -n1 "$TOKEN_FILE")
        token=$(tail -n1 "$TOKEN_FILE")
        age=$(( ( $(date +%s) - created ) / 86400 ))
        if (( age < MAX_AGE )); then
            GITHUB_TOKEN="$token"
            return 0
        fi
    fi
    return 1
}
refresh_token() {
    read -s -p "🔑 Neues GitHub-Token: " GITHUB_TOKEN
    echo
    echo -e "$(date +%s)\n$GITHUB_TOKEN" > "$TOKEN_FILE"
    chmod 600 "$TOKEN_FILE"
}
check_token || refresh_token

if [ -z "$1" ]; then
    echo -e "${RED}❌ Projektnamen angeben!${NC}"
    exit 1
fi
PROJECT_NAME=$1
ZIELORDNER="$PWD/$PROJECT_NAME"
[ -d "$ZIELORDNER" ] && { echo -e "${RED}❌ Ordner existiert.${NC}"; exit 1; }

# === Supabase aus Keychain ===
SR="$(security find-generic-password -a "$USER" -s "SUPABASE_SERVICE_ROLE" -w | tr -d '\r\n')"
URL="$(security find-generic-password -a "$USER" -s "SUPABASE_URL" -w | tr -d '\r\n')"

echo -e "${CYAN}DEBUG Supabase URL: $URL${NC}"
echo -e "${CYAN}DEBUG Service-Role Länge: ${#SR}${NC}"

if [ -z "$SR" ] || [ -z "$URL" ]; then
    echo -e "${RED}❌ Supabase Keys fehlen. Admin kontaktieren.${NC}"
    exit 1
fi

# === Eingaben vom User ===
read -p "📧 Deine E-Mail-Adresse: " SUPABASE_USER_MAIL
read -p "👥 Teammitglieder (frei text): " TEAM_NAMES
read -p "📅 Fälligkeitsdatum [YYYY-MM-DD] (Default $(date -v+14d +%F)): " DUE_DATE
DUE_DATE=${DUE_DATE:-$(date -v+14d +%F)}
read -p "📌 Status wählen: [angemeldet|geplant|laufend|abgeschlossen] (Default: geplant): " MILESTONE_STATUS
MILESTONE_STATUS=${MILESTONE_STATUS:-geplant}

# === GitHub Projekt anlegen ===
echo "→ GitHub Repo & lokales Projekt anlegen …"
git clone "$TEMPLATE_REPO" "$ZIELORDNER"
cd "$ZIELORDNER"
rm -rf .git && git init
touch .gitignore && echo -e ".env\n.DS_Store\nnode_modules" > .gitignore
git add . && git commit -m "🆕 Neues Projekt: $PROJECT_NAME"
curl -s -o /dev/null -w "%{http_code}" \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Content-Type: application/json" \
    -d "{\"name\":\"$PROJECT_NAME\", \"private\":false}" \
    "$GITHUB_API/user/repos"
git remote add origin "https://github.com/$USERNAME/$PROJECT_NAME.git"
git branch -M main
git push -u origin main

# === Supabase Einträge ===
echo "→ Supabase Einträge erstellen …"
USER_ID=$(curl -s \
  -H "apikey: $SR" \
  -H "Authorization: Bearer $SR" \
  "$URL/rest/v1/user_profiles?email=eq.$SUPABASE_USER_MAIL" | jq -r '.[0].id')

if [ -z "$USER_ID" ] || [ "$USER_ID" == "null" ]; then
    echo -e "${RED}❌ Kein Nutzer mit Mail $SUPABASE_USER_MAIL gefunden.${NC}"
    exit 1
fi

# Projekt anlegen
PROJECT_JSON=$(jq -n \
  --arg name "$PROJECT_NAME" \
  --arg startdatum "$(date +%F)" \
  --arg user_id "$USER_ID" \
  --arg status "angemeldet" \
  '{name: $name, status: $status, startdatum: $startdatum, owner_id: $user_id}')

PROJECT_RESPONSE=$(curl -s \
  -H "apikey: $SR" \
  -H "Authorization: Bearer $SR" \
  -H "Content-Type: application/json" \
  -H "Prefer: return=representation" \
  -d "$PROJECT_JSON" \
  "$URL/rest/v1/projects")

PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.[0].id')

if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
    echo -e "${RED}❌ Projekt konnte in Supabase nicht erstellt werden.${NC}"
    echo "Antwort: $PROJECT_RESPONSE"
    exit 1
fi

# Milestone hinzufügen
MILESTONE_JSON=$(jq -n \
  --arg project_id "$PROJECT_ID" \
  --arg title "Team: $TEAM_NAMES" \
  --arg description "https://github.com/$USERNAME/$PROJECT_NAME" \
  --arg due_date "$DUE_DATE" \
  --arg status "$MILESTONE_STATUS" \
  '{project_id: $project_id, title: $title, description: $description, due_date: $due_date, status: $status}')

curl -s \
  -H "apikey: $SR" \
  -H "Authorization: Bearer $SR" \
  -H "Content-Type: application/json" \
  -d "$MILESTONE_JSON" \
  "$URL/rest/v1/milestones" >/dev/null

echo -e "${GREEN}✅ Projekt '$PROJECT_NAME' inkl. Supabase-Integration erstellt.${NC}"
