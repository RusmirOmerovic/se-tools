#!/usr/bin/env bash
# projectnew.sh ‚Äì Neues Projekt (lokal + GitHub) + Supabase-Eintrag
# Voraussetzung: macOS Keychain (security), git, curl, jq
set -euo pipefail

# Farben
GREEN='\033[0;32m'; CYAN='\033[0;36m'; RED='\033[0;31m'; NC='\033[0m'

# ---- Konfiguration ----
TEMPLATE_REPO="https://github.com/RusmirOmerovic/html-template-se.git"
USERNAME="RusmirOmerovic"
GITHUB_API="https://api.github.com"
KEYCHAIN_GH="se-tools-gh-token"         # wie in newproject.sh
SVC_URL="SUPABASE_URL"
SVC_ROLE="SUPABASE_SERVICE_ROLE"

# ---- Checks ----
need(){ command -v "$1" >/dev/null 2>&1 || { echo -e "${RED}‚ùå fehlt: $1${NC}"; exit 1; }; }
need git; need curl; need jq; need security

# ---- GitHub Token laden ----
get_github_token() {
  if security find-generic-password -s "$KEYCHAIN_GH" >/dev/null 2>&1; then
    security find-generic-password -s "$KEYCHAIN_GH" -w
  else
    read -s -p "üîë GitHub-Token (repo+workflow): " t; echo
    security add-generic-password -a "$USER" -s "$KEYCHAIN_GH" -w "$t" -U
    echo -e "${CYAN}üíæ Token im macOS Keychain gespeichert.${NC}"
    echo -n "$t"
  fi
}

# ---- Supabase Secrets laden ----
get_secret() {
  # liest den Secret-Wert und entfernt CR/LF, damit keine Newlines in Headern landen
  security find-generic-password -a "$USER" -s "$1" -w 2>/dev/null | tr -d '\r\n' || true
}


SUPABASE_URL="$(get_secret "$SVC_URL")"
SUPABASE_SERVICE_ROLE="$(get_secret "$SVC_ROLE")"
[[ -n "$SUPABASE_URL" && -n "$SUPABASE_SERVICE_ROLE" ]] || { echo -e "${RED}‚ùå Supabase-Keys fehlen. Erst 'setup-supabase-secrets' ausf√ºhren.${NC}"; exit 1; }
SUPABASE_URL="${SUPABASE_URL%/}"  # Slash am Ende entfernen

echo -e "${CYAN}DEBUG${NC} Supabase URL: $SUPABASE_URL"
echo -e "${CYAN}DEBUG${NC} Service-Role L√§nge: ${#SUPABASE_SERVICE_ROLE}"

# ---- Projektnamen pr√ºfen ----
if [ $# -lt 1 ]; then echo -e "${RED}‚ùå Projektnamen angeben!${NC}"; exit 1; fi
PROJECT_NAME="$1"
ZIELORDNER="$PWD/$PROJECT_NAME"
[ -d "$ZIELORDNER" ] && { echo -e "${RED}‚ùå Ordner '$ZIELORDNER' existiert bereits.${NC}"; exit 1; }

# ---- Nutzerangaben ----
read -r -p "üìß Deine E-Mail-Adresse: " SUPABASE_USER_MAIL
[ -n "$SUPABASE_USER_MAIL" ] || { echo -e "${RED}‚ùå E-Mail darf nicht leer sein.${NC}"; exit 1; }
read -r -p "üë• Teammitglieder (frei Text): " TEAM_NAMES

DEFAULT_DUE="$(date -v+14d +%F 2>/dev/null || date -d '+14 days' +%F)"
read -r -p "üìÖ F√§lligkeitsdatum [YYYY-MM-DD] (Default ${DEFAULT_DUE}): " DUE_DATE
DUE_DATE="${DUE_DATE:-$DEFAULT_DUE}"
[[ "$DUE_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || { echo -e "${RED}‚ùå Datum muss YYYY-MM-DD sein.${NC}"; exit 1; }

echo -e "üìå Status w√§hlen: [angemeldet|geplant|laufend|abgeschlossen]"
read -r -p "Status (Default: geplant): " MILESTONE_STATUS
MILESTONE_STATUS="${MILESTONE_STATUS:-geplant}"

# ---- GitHub: Repo aus Template erstellen ----
echo -e "${CYAN}‚Üí GitHub Repo anlegen & pushen ‚Ä¶${NC}"
GITHUB_TOKEN="$(get_github_token)"

# Guard: Repo existiert schon?
EXIST_HTTP="$(curl -s -o /dev/null -w "%{http_code}" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  "$GITHUB_API/repos/$USERNAME/$PROJECT_NAME")"
if [ "$EXIST_HTTP" = "200" ]; then
  echo -e "${RED}‚ùå Repo '$USERNAME/$PROJECT_NAME' existiert bereits.${NC}"
  exit 1
fi

git clone "$TEMPLATE_REPO" "$ZIELORDNER"
cd "$ZIELORDNER"
rm -rf .git && git init

# Git-Defaults (falls frische Umgebung)
git config user.name  >/dev/null 2>&1 || git config user.name  "$USERNAME"
git config user.email >/dev/null 2>&1 || git config user.email "$SUPABASE_USER_MAIL"

echo -e ".env\n.DS_Store\nnode_modules" > .gitignore
git add . && git commit -m "üÜï Neues Projekt: $PROJECT_NAME"

RESP_CODE="$(curl -s -o /dev/null -w "%{http_code}" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github+json" \
  -H "Content-Type: application/json" \
  -d "{\"name\":\"$PROJECT_NAME\",\"private\":false}" \
  "$GITHUB_API/user/repos")"

if [ "$RESP_CODE" != "201" ]; then
  echo -e "${RED}‚ùå GitHub Repo-Erstellung fehlgeschlagen (HTTP $RESP_CODE).${NC}"; exit 1
fi

git remote add origin "https://github.com/$USERNAME/$PROJECT_NAME.git"
git branch -M main
git push -u origin main

REPO_URL="https://github.com/$USERNAME/$PROJECT_NAME"

# ---- Supabase: User-ID √ºber E-Mail holen (E-Mail URL-encodiert) ----
echo -e "${CYAN}‚Üí Supabase: User & Projekt anlegen ‚Ä¶${NC}"
EMAIL_ENC="$(printf '%s' "$SUPABASE_USER_MAIL" | jq -sRr @uri)"
USER_Q="${SUPABASE_URL}/rest/v1/user_profiles?email=eq.${EMAIL_ENC}&select=id&limit=1"

USER_BODY="$(mktemp)"
USER_HTTP="$(curl -s -o "$USER_BODY" -w "%{http_code}" \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  "$USER_Q")"

if [ "$USER_HTTP" != "200" ]; then
  echo -e "${RED}‚ùå user_profiles Query fehlgeschlagen (HTTP $USER_HTTP):${NC} $(cat "$USER_BODY")"
  rm -f "$USER_BODY"; exit 1
fi

USER_ID="$(jq -r '.[0].id // empty' < "$USER_BODY")"
rm -f "$USER_BODY"
[ -n "$USER_ID" ] || { echo -e "${RED}‚ùå Kein user_profiles Eintrag f√ºr '$SUPABASE_USER_MAIL'. Bitte zuerst im Frontend registrieren.${NC}"; exit 1; }

# ---- user_roles absichern (Upsert), damit beide FKs von projects.owner_id erf√ºllt sind ----
read -r -p "üë§ Rolle f√ºr den Projekt-Owner [student|tutor|owner] (Default: student): " OWNER_ROLE
OWNER_ROLE="${OWNER_ROLE:-student}"

ROLE_JSON="$(jq -n --arg role "$OWNER_ROLE" --arg user_id "$USER_ID" '{role:$role,user_id:$user_id}')"

ROLE_BODY="$(mktemp)"
ROLE_HTTP="$(curl -s -o "$ROLE_BODY" -w "%{http_code}" \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  -H "Content-Type: application/json" \
  -H "Prefer: resolution=merge-duplicates,return=representation" \
  -d "$ROLE_JSON" \
  "${SUPABASE_URL}/rest/v1/user_roles?on_conflict=user_id")"

if [[ ! "$ROLE_HTTP" =~ ^20[01]$ ]]; then
  echo -e "${RED}‚ùå Upsert user_roles fehlgeschlagen (HTTP $ROLE_HTTP):${NC} $(cat "$ROLE_BODY")"
  rm -f "$ROLE_BODY"; exit 1
fi
ROLE_ROW_USER_ID="$(jq -r '.[0].user_id // empty' < "$ROLE_BODY")"
rm -f "$ROLE_BODY"

if [[ "$ROLE_ROW_USER_ID" != "$USER_ID" ]]; then
  echo -e "${RED}‚ùå user_roles.user_id weicht von user_profiles.id ab. Abbruch.${NC}"
  exit 1
fi

# ---- Supabase: Projekt eintragen ----
STARTDATUM="$(date +%F)"
PROJECT_JSON="$(jq -n \
  --arg name "$PROJECT_NAME" \
  --arg status "angemeldet" \
  --arg startdatum "$STARTDATUM" \
  --arg owner_id "$USER_ID" \
  '{name:$name,status:$status,startdatum:$startdatum,owner_id:$owner_id}')"

PRJ_BODY="$(mktemp)"
PRJ_HTTP="$(curl -s -o "$PRJ_BODY" -w "%{http_code}" \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  -H "Content-Type: application/json" \
  -H "Prefer: return=representation" \
  -d "$PROJECT_JSON" \
  "${SUPABASE_URL}/rest/v1/projects")"

if [[ ! "$PRJ_HTTP" =~ ^20[01]$ ]]; then
  echo -e "${RED}‚ùå Projekt-Insert fehlgeschlagen (HTTP $PRJ_HTTP):${NC} $(cat "$PRJ_BODY")"
  rm -f "$PRJ_BODY"; exit 1
fi

PROJECT_ID="$(jq -r '.[0].id // empty' < "$PRJ_BODY")"
rm -f "$PRJ_BODY"
[ -n "$PROJECT_ID" ] || { echo -e "${RED}‚ùå Supabase hat keine Projekt-ID zur√ºckgegeben.${NC}"; exit 1; }

# ---- Supabase: Milestone anlegen ----
MILESTONE_JSON="$(jq -n \
  --arg project_id "$PROJECT_ID" \
  --arg title "Team: $TEAM_NAMES" \
  --arg description "$REPO_URL" \
  --arg due_date "$DUE_DATE" \
  --arg status "$MILESTONE_STATUS" \
  '{project_id:$project_id,title:$title,description:$description,due_date:$due_date,status:$status}')"

MS_BODY="$(mktemp)"
MS_HTTP="$(curl -s -o "$MS_BODY" -w "%{http_code}" \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  -H "Content-Type: application/json" \
  -H "Prefer: return=representation" \
  -d "$MILESTONE_JSON" \
  "${SUPABASE_URL}/rest/v1/milestones")"

if [[ ! "$MS_HTTP" =~ ^20[01]$ ]]; then
  echo -e "${RED}‚ùå Milestone-Insert fehlgeschlagen (HTTP $MS_HTTP):${NC} $(cat "$MS_BODY")"
  rm -f "$MS_BODY"; exit 1
fi

MS_ID="$(jq -r '.[0].id // empty' < "$MS_BODY")"
rm -f "$MS_BODY"
[ -n "$MS_ID" ] || { echo -e "${RED}‚ùå Supabase hat keine Milestone-ID zur√ºckgegeben.${NC}"; exit 1; }

echo -e "${GREEN}‚úÖ Projekt '$PROJECT_NAME' erstellt & auf GitHub gepusht.${NC}"
echo -e "${GREEN}‚úÖ Supabase: project=${PROJECT_ID}, milestone=${MS_ID}.${NC}"
echo -e "üîó $REPO_URL"
