#!/bin/bash
# projectnew.sh ‚Äì Neues Projekt + GitHub Repo + Supabase-Eintrag
# Sicherheit: GitHub-Token wird im macOS Keychain gespeichert

set -e
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# === Basis-Variablen ===
TEMPLATE_REPO="https://github.com/RusmirOmerovic/html-template-se.git"
USERNAME="RusmirOmerovic"
GITHUB_API="https://api.github.com"
SERVICE_NAME="se-tools"   # Name f√ºr Keychain-Eintrag

# === Token aus Keychain abrufen oder neu speichern ===
get_token() {
    # Versuchen, Token aus Keychain zu lesen
    if GITHUB_TOKEN=$(security find-generic-password -s "$SERVICE_NAME" -a "$USER" -w 2>/dev/null); then
        echo "üîê Token aus macOS Keychain geladen."
    else
        # Wenn kein Token vorhanden ‚Üí nach Token fragen
        read -s -p "üîë Neues GitHub-Token: " GITHUB_TOKEN
        echo
        # Token sicher im Keychain speichern
        security add-generic-password -s "$SERVICE_NAME" -a "$USER" -w "$GITHUB_TOKEN" -U
        echo "üíæ Token wurde sicher im macOS Keychain gespeichert."
    fi
}
get_token

# === Projektnamen pr√ºfen ===
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Projektnamen angeben!${NC}"
    exit 1
fi
PROJECT_NAME=$1
ZIELORDNER="$PWD/$PROJECT_NAME"
[ -d "$ZIELORDNER" ] && { echo -e "${RED}‚ùå Ordner existiert.${NC}"; exit 1; }

# === Supabase Variablen aus Schl√ºsselbundverwaltung einlesen ===
SUPABASE_URL=$(security find-generic-password -a "$USER" -s "SUPABASE_URL" -w 2>/dev/null || true)
SUPABASE_SERVICE_ROLE=$(security find-generic-password -a "$USER" -s "SUPABASE_SERVICE_ROLE" -w 2>/dev/null || true)

if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_ROLE" ]; then
    echo -e "${RED}‚ùå Supabase Keys nicht im Keychain gefunden. Bitte Admin kontaktieren.${NC}"
    exit 1
fi

read -p "üìß Deine E-Mail-Adresse: " SUPABASE_USER_MAIL


# === Zus√§tzliche Eingaben ===
read -p "üë• Teammitglieder: " TEAM_NAMES
read -p "üìÖ F√§lligkeitsdatum (YYYY-MM-DD): " DUE_DATE
read -p "üìå Status: " MILESTONE_STATUS
[[ -z "$TEAM_NAMES" || -z "$DUE_DATE" || -z "$MILESTONE_STATUS" ]] && { echo -e "${RED}‚ùå Alle Felder ausf√ºllen!${NC}"; exit 1; }

# === Lokales Projekt erstellen ===
git clone "$TEMPLATE_REPO" "$ZIELORDNER"
cd "$ZIELORDNER"
rm -rf .git && git init
echo -e ".env\n.DS_Store\nnode_modules" > .gitignore
git add . && git commit -m "üÜï Neues Projekt: $PROJECT_NAME"

# === GitHub Repo erstellen ===
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
    -H "Authorization: token $GITHUB_TOKEN" \
    -H "Content-Type: application/json" \
    -d "{\"name\":\"$PROJECT_NAME\", \"private\":false}" \
    "$GITHUB_API/user/repos")

if [ "$RESPONSE" != "201" ]; then
    echo -e "${RED}‚ùå Fehler bei GitHub Repo-Erstellung.${NC}"
    exit 1
fi

git remote add origin "https://github.com/$USERNAME/$PROJECT_NAME.git"
git branch -M main
git push -u origin main

# === Supabase-Eintrag (Projekt + Meilenstein) ===
USER_ID=$(curl -s -H "apikey: $SUPABASE_SERVICE_ROLE" -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
    "$SUPABASE_URL/rest/v1/user_profiles?email=eq.$SUPABASE_USER_MAIL" | jq -r '.[0].id')

PROJECT_JSON=$(jq -n \
    --arg name "$PROJECT_NAME" \
    --arg startdatum "$(date +%F)" \
    --arg user_id "$USER_ID" \
    --arg status "angemeldet" \
    '{name: $name, status: $status, startdatum: $startdatum, owner_id: $user_id}')

PROJECT_RESPONSE=$(curl -s \
    -H "apikey: $SUPABASE_SERVICE_ROLE" \
    -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
    -H "Content-Type: application/json" \
    -H "Prefer: return=representation" \
    -d "$PROJECT_JSON" \
    "$SUPABASE_URL/rest/v1/projects")

PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.[0].id')

MILESTONE_JSON=$(jq -n \
    --arg project_id "$PROJECT_ID" \
    --arg title "Team: $TEAM_NAMES" \
    --arg description "https://github.com/$USERNAME/$PROJECT_NAME" \
    --arg due_date "$DUE_DATE" \
    --arg status "$MILESTONE_STATUS" \
    '{project_id: $project_id, title: $title, description: $description, due_date: $due_date, status: $status}')

curl -s \
    -H "apikey: $SUPABASE_SERVICE_ROLE" \
    -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
    -H "Content-Type: application/json" \
    -d "$MILESTONE_JSON" \
    "$SUPABASE_URL/rest/v1/milestones"

echo -e "${GREEN}‚úÖ Projekt '$PROJECT_NAME' inkl. Supabase-Integration erstellt.${NC}"
