#!/usr/bin/env bash
# projectnew.sh ‚Äì Neues Projekt (GitHub + Supabase via Vercel-Proxy, kein Key im Repo)
# Abh√§ngigkeiten: git, curl, jq, (macOS) security
set -euo pipefail

# ========= Konfiguration =========
# Deine Vercel-App-Basis-URL (ohne Slash am Ende), z.B. https://frontend-se-cyan.vercel.app
: "${VERCEL_BASE:?Setze VERCEL_BASE, z.B. export VERCEL_BASE='https://frontend-se-cyan.vercel.app'}"

TEMPLATE_REPO="${TEMPLATE_REPO:-https://github.com/RusmirOmerovic/html-template-se.git}"
USERNAME="${USERNAME:-RusmirOmerovic}"
GITHUB_API="https://api.github.com"
KEYCHAIN_GH="se-tools-gh-token"

GREEN='\033[0;32m'; CYAN='\033[0;36m'; RED='\033[0;31m'; NC='\033[0m'

need(){ command -v "$1" >/dev/null 2>&1 || { echo -e "${RED}‚ùå fehlt: $1${NC}"; exit 1; }; }
need git; need curl; need jq
command -v security >/dev/null 2>&1 || echo -e "${CYAN}‚ÑπÔ∏è security (Keychain) nicht gefunden ‚Äì GH-Token wird dann nur per Prompt gelesen.${NC}"

get_github_token() {
  local t=""
  if command -v security >/dev/null 2>&1 && security find-generic-password -s "$KEYCHAIN_GH" >/dev/null 2>&1; then
    t="$(security find-generic-password -s "$KEYCHAIN_GH" -w | tr -d '\r\n')"
  fi
  if [[ -z "$t" ]]; then
    read -r -s -p "üîë GitHub-Token (scope: repo, workflow): " t; echo
    if command -v security >/dev/null 2>&1; then
      security add-generic-password -a "$USER" -s "$KEYCHAIN_GH" -w "$t" -U >/dev/null 2>&1 || true
      echo -e "${CYAN}üíæ GH-Token im macOS Keychain gespeichert.${NC}"
    fi
  fi
  echo -n "$t"
}

# ========= Eingaben pr√ºfen =========
if [ $# -lt 1 ]; then echo -e "${RED}‚ùå Projektnamen angeben!${NC}"; exit 1; fi
PROJECT_NAME="$1"
ZIELORDNER="$PWD/$PROJECT_NAME"
[ -d "$ZIELORDNER" ] && { echo -e "${RED}‚ùå Ordner '$ZIELORDNER' existiert bereits.${NC}"; exit 1; }

# ========= User-Metadaten abfragen =========
read -r -p "üë• Teammitglieder (frei Text): " TEAM_NAMES
DEFAULT_DUE="$(date -v+14d +%F 2>/dev/null || date -d '+14 days' +%F)"
read -r -p "üìÖ F√§lligkeitsdatum [YYYY-MM-DD] (Default ${DEFAULT_DUE}): " DUE_DATE
DUE_DATE="${DUE_DATE:-$DEFAULT_DUE}"
[[ "$DUE_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || { echo -e "${RED}‚ùå Datum muss YYYY-MM-DD sein.${NC}"; exit 1; }
echo -e "üìå Status w√§hlen: [angemeldet|geplant|laufend|abgeschlossen]"
read -r -p "Status (Default: geplant): " MILESTONE_STATUS
MILESTONE_STATUS="${MILESTONE_STATUS:-geplant}"

# ========= GitHub-Repo aus Template erstellen =========
echo -e "${CYAN}‚Üí GitHub Repo anlegen & pushen ‚Ä¶${NC}"
GITHUB_TOKEN="$(get_github_token)"

EXIST_HTTP="$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $GITHUB_TOKEN" \
  "$GITHUB_API/repos/$USERNAME/$PROJECT_NAME")"
if [ "$EXIST_HTTP" = "200" ]; then
  echo -e "${RED}‚ùå Repo '$USERNAME/$PROJECT_NAME' existiert bereits.${NC}"
  exit 1
fi

git clone "$TEMPLATE_REPO" "$ZIELORDNER"
cd "$ZIELORDNER"
rm -rf .git && git init
git config user.name  >/dev/null 2>&1 || git config user.name  "$USERNAME"
git config user.email >/dev/null 2>&1 || git config user.email "no-reply@users.noreply.github.com"
echo -e ".env\n.DS_Store\nnode_modules" > .gitignore
git add . && git commit -m "üÜï Neues Projekt: $PROJECT_NAME"

RESP_CODE="$(curl -s -o /dev/null -w "%{http_code}" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github+json" \
  -H "Content-Type: application/json" \
  -d "{\"name\":\"$PROJECT_NAME\",\"private\":false}" \
  "$GITHUB_API/user/repos")"
if [ "$RESP_CODE" != "201" ]; then
  echo -e "${RED}‚ùå GitHub Repo-Erstellung fehlgeschlagen (HTTP $RESP_CODE).${NC}"; exit 1
fi

git remote add origin "https://github.com/$USERNAME/$PROJECT_NAME.git"
git branch -M main
git push -u origin main
REPO_URL="https://github.com/$USERNAME/$PROJECT_NAME"

# ========= Login √ºber Vercel-API (kein Key lokal n√∂tig) =========
echo -e "${CYAN}‚Üí Login via Vercel-API ‚Ä¶${NC}"
read -r -p "üìß Login E-Mail: " LOGIN_EMAIL
# zsh/b ash-kompatible Passwort-Eingabe:
if [ -n "${ZSH_VERSION-}" ]; then
  read -s "LOGIN_PASS?üîí Passwort: "; echo
else
  read -s -p "üîí Passwort: " LOGIN_PASS; echo
fi

LOGIN_HTTP=$(curl -s -o /tmp/login.json -w "%{http_code}" \
  -X POST "$VERCEL_BASE/api/login" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$LOGIN_EMAIL\",\"password\":\"$LOGIN_PASS\"}")

if [[ "$LOGIN_HTTP" != "200" ]]; then
  echo -e "${RED}‚ùå Login fehlgeschlagen (HTTP $LOGIN_HTTP):${NC}"; cat /tmp/login.json; exit 1
fi
ACCESS_TOKEN="$(jq -r '.access_token // empty' /tmp/login.json)"
[ -n "$ACCESS_TOKEN" ] || { echo -e "${RED}‚ùå Kein access_token erhalten.${NC}"; cat /tmp/login.json; exit 1; }

# ======== Interaktive Eingaben mit Defaults ========
# macOS (BSD-date) ODER Linux (GNU-date) +30 Tage
DEFAULT_DUE="$(date -v+30d +%F 2>/dev/null || date -d '+30 days' +%F)"
TODAY="$(date +%F)"

# kleine Helper: read mit Default (zsh & bash)
read_default() {
  local __prompt="$1" __varname="$2" __default="$3" __input=""
  if [ -n "${ZSH_VERSION-}" ]; then
    read -r "${__varname}?${__prompt} [${__default}]: " || true
    eval "__input=\"\${${__varname}:-}\""
  else
    read -r -p "${__prompt} [${__default}]: " __input || true
  fi
  eval "$__varname=\"\${__input:-$__default}\""
}

echo -e "${CYAN}‚Üí Angaben zum Projekt/Meilenstein${NC}"

# Status mit Default
read_default "üìå Status (angemeldet|geplant|laufend|abgeschlossen)" MILESTONE_STATUS "geplant"

# Team (optional)
read_default "üë• Team (frei Text, optional)" TEAM_NAMES ""

# Beschreibung (optional)
read_default "üìù Beschreibung (optional)" DESCRIPTION ""

# F√§lligkeitsdatum (YYYY-MM-DD) mit Default +30 Tage
while true; do
  read_default "üìÖ F√§lligkeitsdatum (YYYY-MM-DD)" DUE_DATE "$DEFAULT_DUE"
  if [[ "$DUE_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then break; fi
  echo -e "${RED}‚ùå Ung√ºltiges Datum. Bitte Format YYYY-MM-DD verwenden.${NC}"
done

# Startdatum (heute) ‚Äì falls du es setzen willst
START_DATE="$TODAY"


# ========= Projekt via Vercel-API -> Edge Function anlegen =========
echo -e "${CYAN}‚Üí Supabase: projectnew (√ºber Vercel -> Edge Function) ‚Ä¶${NC}"

PAYLOAD="$(jq -n \
  --arg name   "$PROJECT_NAME" \
  --arg status "$MILESTONE_STATUS" \
  --arg start  "$START_DATE" \
  --arg team   "$TEAM_NAMES" \
  --arg due    "$DUE_DATE" \
  --arg desc   "$DESCRIPTION" \
  --arg repo   "${REPO_URL:-}" \
  '{
     name: $name,
     status: ( ($status|length)>0 ? $status : "geplant" ),
     startdatum: $start,
     team: ( ($team|length)>0 ? $team : null ),
     description: ( ($desc|length)>0 ? $desc : null ),
     due_date: ( ($due|length)>0 ? $due : null ),
     repo_url: ( ($repo|length)>0 ? $repo : null )
   }')"

PR_HTTP=$(curl -s -o /tmp/projectnew.json -w "%{http_code}" \
  -X POST "$VERCEL_BASE/api/projectnew" \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d "$PAYLOAD")

if [[ ! "$PR_HTTP" =~ ^20[01]$ ]]; then
  echo -e "${RED}‚ùå Projektanlage fehlgeschlagen (HTTP $PR_HTTP):${NC}"
  cat /tmp/projectnew.json; exit 1
fi

echo -e "${GREEN}‚úÖ Projekt '$PROJECT_NAME' erstellt & auf GitHub gepusht.${NC}"
echo -e "${GREEN}‚úÖ Supabase Antwort:${NC}"; jq . /tmp/projectnew.json || cat /tmp/projectnew.json
echo -e "üîó Repo: $REPO_URL"
