#!/usr/bin/env bash
# setup-supabase-secrets ‚Äì einmalig durch Admin ausf√ºhren
# Speichert SUPABASE_URL & SUPABASE_SERVICE_ROLE sicher und validiert sie
set -euo pipefail
IFS=$'\n\t'

SVC_URL="SUPABASE_URL"
SVC_ROLE="SUPABASE_SERVICE_ROLE"

detect_os() {
  case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    darwin*)   echo "macos" ;;
    linux*)    echo "linux" ;;
    msys*|mingw*|cygwin*) echo "windows" ;;
    *)         echo "unknown" ;;
  esac
}

prompt_secret() { local var; read -r -p "$1: " var; echo -n "$var"; }
prompt_secret_hidden() { local var; read -r -s -p "$1: " var; echo; echo -n "$var"; }

store_macos() {
  local url="$1" role="$2"
  security add-generic-password -a "$USER" -s "$SVC_URL"  -w "$url"  -U >/dev/null 2>&1 || true
  security add-generic-password -a "$USER" -s "$SVC_ROLE" -w "$role" -U >/dev/null 2>&1 || true
  echo "üîê Gespeichert in macOS Keychain."
}

store_linux() {
  local url="$1" role="$2"
  if command -v secret-tool >/dev/null 2>&1; then
    printf %s "$url"  | secret-tool store --label='se-tools' service "$SVC_URL"  account "$USER"
    printf %s "$role" | secret-tool store --label='se-tools' service "$SVC_ROLE" account "$USER"
    echo "üîê Gespeichert in Secret Service (secret-tool)."
  else
    mkdir -p "$HOME/.config/se-tools"; chmod 700 "$HOME/.config/se-tools"
    umask 177
    printf %s "$url"  > "$HOME/.config/se-tools/${SVC_URL}.txt"
    printf %s "$role" > "$HOME/.config/se-tools/${SVC_ROLE}.txt"
    chmod 600 "$HOME/.config/se-tools/${SVC_URL}.txt" "$HOME/.config/se-tools/${SVC_ROLE}.txt"
    echo "‚ö†Ô∏è secret-tool nicht gefunden ‚Äì als 600-Dateien abgelegt (Fallback)."
  fi
}

store_windows() {
  local url="$1" role="$2"
  local ps='
    param([string]$Url,[string]$Role)
    New-Item -ItemType Directory -Force $env:APPDATA\se-tools | Out-Null
    $secU = ConvertTo-SecureString $Url  -AsPlainText -Force
    $encU = $secU | ConvertFrom-SecureString
    Set-Content $env:APPDATA\se-tools\SUPABASE_URL.txt $encU
    $secR = ConvertTo-SecureString $Role -AsPlainText -Force
    $encR = $secR | ConvertFrom-SecureString
    Set-Content $env:APPDATA\se-tools\SUPABASE_SERVICE_ROLE.txt $encR
  '
  powershell.exe -NoProfile -Command "$ps" -Url "$url" -Role "$role" >/dev/null 2>&1 || {
    echo "‚ùå PowerShell-Aufruf fehlgeschlagen."; exit 1;
  }
  echo "üîê Gespeichert mit DPAPI in %APPDATA%\\se-tools\\*.txt"
}

validate_on_macos_or_linux() {
  # liest Werte zur√ºck (ohne CR/LF), pr√ºft Ref-Match (wenn m√∂glich) & macht einen Auth-Ping
  local url key ref_expected ref_actual http os="$1" decode_cmd payload

  if [[ "$os" == "macos" ]]; then
    url="$(security find-generic-password -a "$USER" -s "$SVC_URL" -w | tr -d '\r\n')"
    key="$(security find-generic-password -a "$USER" -s "$SVC_ROLE" -w | tr -d '\r\n')"
    decode_cmd="base64 -D"
  else
    if command -v secret-tool >/dev/null 2>&1; then
      url="$(secret-tool lookup service "$SVC_URL" account "$USER" | tr -d '\r\n')"
      key="$(secret-tool lookup service "$SVC_ROLE" account "$USER" | tr -d '\r\n')"
    else
      url="$(cat "$HOME/.config/se-tools/${SVC_URL}.txt" 2>/dev/null | tr -d '\r\n')"
      key="$(cat "$HOME/.config/se-tools/${SVC_ROLE}.txt" 2>/dev/null | tr -d '\r\n')"
    fi
    decode_cmd="base64 -d"
  fi

  url="${url%/}"
  [[ -n "$url" && -n "$key" ]] || { echo "‚ùå Validierung fehlgeschlagen (URL/Key leer)."; exit 1; }

  # Projekt-Ref aus URL
  ref_expected="$(echo "$url" | sed -E 's#https?://([^./]+)\.supabase\.co.*#\1#')"

  # JWT-Payload (base64url ‚Üí base64, dann decode) und ref vergleichen (best effort)
  if command -v jq >/dev/null 2>&1; then
    payload="$(
      printf '%s' "$key" \
        | awk -F. '{print $2}' \
        | tr '_-' '/+' \
        | awk '{l=(4 - (length % 4)) % 4; while(l-->0) printf "="; print}' \
        | eval "$decode_cmd" 2>/dev/null || true
    )"
    if [[ -n "$payload" ]]; then
      ref_actual="$(echo "$payload" | jq -r '.ref // empty' 2>/dev/null || true)"
      if [[ -n "$ref_actual" && "$ref_actual" != "$ref_expected" ]]; then
        echo "‚ùå Service-Role geh√∂rt zu '$ref_actual', erwartet '$ref_expected'. Bitte korrekten Key speichern."
        exit 1
      fi
    fi
  fi

  # Auth-Ping (entscheidend)
  http="$(curl -s -o /dev/null -w "%{http_code}" \
     -H "apikey: $key" -H "Authorization: Bearer $key" \
     "$url/rest/v1/user_profiles?select=id&limit=1")"
  if [ "$http" != "200" ]; then
    echo "‚ùå Supabase Auth-Check fehlgeschlagen (HTTP $http). URL/Key passen nicht zusammen."
    exit 1
  fi

  echo "‚úÖ Validierung ok (Projekt-Ref: $ref_expected, REST erreichbar)."
}

main() {
  local OS="$(detect_os)"
  if [[ "$OS" == "unknown" ]]; then
    echo "‚ùå Nicht unterst√ºtztes OS."; exit 1
  fi

  echo "‚Üí Supabase-Parameter einmalig setzen (nur Admin):"
  local URL ROLE
  URL="$(prompt_secret 'SUPABASE_URL (z.B. https://<your>.supabase.co)')"
  ROLE="$(prompt_secret_hidden 'SUPABASE_SERVICE_ROLE (JWT)')"
  [[ -z "$URL" || -z "$ROLE" ]] && { echo "‚ùå Beide Werte erforderlich."; exit 1; }

  # trailing slash entfernen
  URL="${URL%/}"

  case "$OS" in
    macos)   store_macos "$URL" "$ROLE"; validate_on_macos_or_linux "macos" ;;
    linux)   store_linux "$URL" "$ROLE"; validate_on_macos_or_linux "linux" ;;
    windows) store_windows "$URL" "$ROLE"; echo "‚ÑπÔ∏è Bitte manuell testen: curl -H 'apikey: <key>' -H 'Authorization: Bearer <key>' '$URL/rest/v1/user_profiles?select=id&limit=1'";;
  esac

  echo "‚úÖ Fertig. Nutzer k√∂nnen jetzt mit 'projectnew <name>' + E-Mail Projekte anlegen."
}

main "$@"
