#!/usr/bin/env bash
# projectnew – Neues Projekt (lokal + GitHub) + Supabase-Eintrag (Frontend)
# - Nutzt GitHub-Token aus macOS Keychain (Service: se-tools-gh-token) – identisch zu newproject
# - Nutzt SUPABASE_URL + SUPABASE_SERVICE_ROLE aus macOS Keychain (setup-supabase-secrets)
# - Fragt Nutzerdaten ab (E-Mail, Team, Fälligkeitsdatum, Status)
# - Debug-Hinweis: zeigt NUR Supabase-URL und Länge des Service-Role Keys

set -euo pipefail

# ===== Farben =====
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# ===== Konfiguration =====
TEMPLATE_REPO="https://github.com/RusmirOmerovic/html-template-se.git"
USERNAME="RusmirOmerovic"
GITHUB_API="https://api.github.com"
KEYCHAIN_GH_SERVICE="se-tools-gh-token"   # wie in newproject

# ===== Helper =====
die() { echo -e "${RED}❌ $*${NC}" >&2; exit 1; }
need() { command -v "$1" >/dev/null 2>&1 || die "Benötigtes Tool fehlt: $1"; }

need git
need curl
need jq

# --- GitHub Token aus Keychain (wie newproject); Fallback gh auth; Fallback Prompt ---
get_github_token() {
  local t=""
  if security find-generic-password -s "$KEYCHAIN_GH_SERVICE" >/dev/null 2>&1; then
    t="$(security find-generic-password -s "$KEYCHAIN_GH_SERVICE" -w 2>/dev/null || true)"
  fi
  if [[ -z "$t" ]] && command -v gh >/dev/null 2>&1 && gh auth status >/dev/null 2>&1; then
    t="$(gh auth token 2>/dev/null || true)"
  fi
  if [[ -z "$t" ]]; then
    read -s -p "🔑 GitHub-Token (repo+workflow): " t; echo
    security add-generic-password -a "$USER" -s "$KEYCHAIN_GH_SERVICE" -w "$t" -U >/dev/null 2>&1 || true
    echo -e "${CYAN}💾 GitHub-Token im Keychain gespeichert (${KEYCHAIN_GH_SERVICE}).${NC}"
  fi
  [[ -n "$t" ]] || die "Kein GitHub-Token verfügbar."
  echo -n "$t"
}

# --- Supabase Secrets aus Keychain ---
get_supabase_secret() {
  local name="$1"
  security find-generic-password -a "$USER" -s "$name" -w 2>/dev/null | tr -d '\r\n' || true
}

SUPABASE_URL="$(get_supabase_secret "SUPABASE_URL")"
SUPABASE_SERVICE_ROLE="$(get_supabase_secret "SUPABASE_SERVICE_ROLE")"
[[ -n "${SUPABASE_URL}" && -n "${SUPABASE_SERVICE_ROLE}" ]] \
  || die "Supabase Keys fehlen. Bitte zuerst 'setup-supabase-secrets' ausführen."

# ===== DEBUG (keine Geheimnisse ausgeben) =====
echo -e "${CYAN}DEBUG${NC} Supabase URL: ${SUPABASE_URL}"
echo -e "${CYAN}DEBUG${NC} Service-Role Länge: ${#SUPABASE_SERVICE_ROLE}"

# ===== Projektnamen =====
PROJECT_NAME="${1:-}"
if [[ -z "${PROJECT_NAME}" ]]; then
  read -r -p "📦 Projektname: " PROJECT_NAME
fi
[[ -n "${PROJECT_NAME}" ]] || die "Projektnamen angeben!"
ZIELORDNER="${PWD}/${PROJECT_NAME}"
[[ -d "${ZIELORDNER}" ]] && die "Ordner '${ZIELORDNER}' existiert bereits."

# ===== Nutzerdaten =====
read -r -p "📧 Deine E-Mail-Adresse: " SUPABASE_USER_MAIL
[[ -n "${SUPABASE_USER_MAIL}" ]] || die "E-Mail darf nicht leer sein."
read -r -p "👥 Teammitglieder (frei text): " TEAM_NAMES

# Default-Datum: +14 Tage (macOS: date -v)
DEFAULT_DUE="$(date -v+14d +%F 2>/dev/null || date -d '+14 days' +%F)"
read -r -p "📅 Fälligkeitsdatum [YYYY-MM-DD] (Default ${DEFAULT_DUE}): " DUE_DATE
DUE_DATE="${DUE_DATE:-$DEFAULT_DUE}"
[[ "${DUE_DATE}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || die "Fälligkeitsdatum muss YYYY-MM-DD sein."

echo -e "📌 Status wählen: [angemeldet|geplant|laufend|abgeschlossen]"
read -r -p "Status (Default: geplant): " MILESTONE_STATUS
MILESTONE_STATUS="${MILESTONE_STATUS:-geplant}"

# ===== GitHub Teil (lokal + remote) =====
echo -e "${CYAN}→ GitHub Repo & lokales Projekt anlegen …${NC}"
GITHUB_TOKEN="$(get_github_token)"

git clone "${TEMPLATE_REPO}" "${ZIELORDNER}"
cd "${ZIELORDNER}"
rm -rf .git && git init

# .gitignore
printf ".env\n.DS_Store\nnode_modules\n" > .gitignore

git add . && git commit -m "🆕 Neues Projekt: ${PROJECT_NAME}"

# Remote Repo erstellen (robust: gh bevorzugen)
if command -v gh >/dev/null 2>&1; then
  gh repo create "${USERNAME}/${PROJECT_NAME}" --public -y >/dev/null
else
  RESP_CODE="$(curl -s -o /dev/null -w "%{http_code}" \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    -H "Content-Type: application/json" \
    -d "{\"name\":\"${PROJECT_NAME}\", \"private\":false}" \
    "${GITHUB_API}/user/repos")"
  [[ "${RESP_CODE}" == "201" ]] || die "Fehler bei GitHub Repo-Erstellung (HTTP ${RESP_CODE})."
fi

# kurze Propagations-Wartezeit und Verifikation
sleep 2
if ! curl -sf "https://api.github.com/repos/${USERNAME}/${PROJECT_NAME}" >/dev/null; then
  die "Remote Repo '${USERNAME}/${PROJECT_NAME}' nicht auffindbar."
fi

git remote add origin "https://github.com/${USERNAME}/${PROJECT_NAME}.git"
git branch -M main
git push -u origin main

REPO_URL="https://github.com/${USERNAME}/${PROJECT_NAME}"

# ===== Supabase: User-ID holen =====
echo -e "${CYAN}→ Supabase Einträge erstellen …${NC}"
USER_QUERY="${SUPABASE_URL}/rest/v1/user_profiles?email=eq.${SUPABASE_USER_MAIL}&select=id&limit=1"

USER_ID="$(curl -s \
  -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
  -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
  "${USER_QUERY}" | jq -r '.[0].id')"

if [[ -z "${USER_ID}" || "${USER_ID}" == "null" ]]; then
  die "Kein user_profiles-Eintrag für ${SUPABASE_USER_MAIL} gefunden. Bitte zuerst im Frontend registrieren."
fi

# ===== Supabase: Projekt anlegen =====
STARTDATUM="$(date +%F)"
PROJECT_JSON="$(jq -n \
  --arg name "${PROJECT_NAME}" \
  --arg startdatum "${STARTDATUM}" \
  --arg user_id "${USER_ID}" \
  --arg status "angemeldet" \
  '{name:$name,status:$status,startdatum:$startdatum,owner_id:$user_id}')"

PROJECT_RESPONSE="$(curl -s \
  -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
  -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
  -H "Content-Type: application/json" \
  -H "Prefer: return=representation" \
  -d "${PROJECT_JSON}" \
  "${SUPABASE_URL}/rest/v1/projects")"

PROJECT_ID="$(echo "${PROJECT_RESPONSE}" | jq -r '.[0].id')"
[[ -n "${PROJECT_ID}" && "${PROJECT_ID}" != "null" ]] || die "Projekt konnte in Supabase nicht angelegt werden: ${PROJECT_RESPONSE}"

# ===== Supabase: Milestone anlegen =====
MILESTONE_JSON="$(jq -n \
  --arg project_id "${PROJECT_ID}" \
  --arg title "Team: ${TEAM_NAMES}" \
  --arg description "${REPO_URL}" \
  --arg due_date "${DUE_DATE}" \
  --arg status "${MILESTONE_STATUS}" \
  '{project_id:$project_id,title:$title,description:$description,due_date:$due_date,status:$status}')"

MS_RESP="$(curl -s \
  -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
  -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
  -H "Content-Type: application/json" \
  -d "${MILESTONE_JSON}" \
  "${SUPABASE_URL}/rest/v1/milestones")"

MS_ERR="$(echo "${MS_RESP}" | jq -r 'if type=="object" and has("message") then .message else empty end' 2>/dev/null || true)"
[[ -z "${MS_ERR}" ]] || die "Milestone-Insert fehlgeschlagen: ${MS_ERR}"

echo -e "${GREEN}✅ Projekt '${PROJECT_NAME}' erstellt & auf GitHub gepusht.${NC}"
echo -e "${GREEN}✅ Supabase: project=${PROJECT_ID}, milestone OK.${NC}"
echo -e "🔗 ${REPO_URL}"
