#!/bin/bash

# === KONFIGURATION ===
TEMPLATE_REPO="https://github.com/RusmirOmerovic/html-template-se.git"
USERNAME="RusmirOmerovic"
GITHUB_API="https://api.github.com"
PROJEKTPFAD="$(pwd)"

# === TOKEN HANDLING ===
CONFIG_DIR="$HOME/.config/se-tools"
TOKEN_FILE="$CONFIG_DIR/gh_token.txt"
MAX_AGE=80

mkdir -p "$CONFIG_DIR"
chmod 700 "$CONFIG_DIR"

check_token() {
    if [[ -f "$TOKEN_FILE" ]]; then
        created=$(head -n1 "$TOKEN_FILE")
        token=$(tail -n1 "$TOKEN_FILE")
        age=$(( ( $(date +%s) - created ) / 86400 ))
        if (( age < MAX_AGE )); then
            GITHUB_TOKEN="$token"
            echo "üîê Token gefunden ($age Tage alt)"
            return 0
        else
            echo "‚ö†Ô∏è  Token ist $age Tage alt. Bitte neues eingeben."
        fi
    else
        echo "‚ùå Kein gespeichertes Token vorhanden."
    fi
    return 1
}

refresh_token() {
    echo -n "üîë Neues GitHub-Token eingeben: "
    read -s GITHUB_TOKEN
    echo
    now=$(date +%s)
    echo -e "$now\n$GITHUB_TOKEN" > "$TOKEN_FILE"
    chmod 600 "$TOKEN_FILE"
    echo "‚úÖ Neues Token gespeichert."
}

if ! check_token; then
    refresh_token
fi

# === EINGABEPR√úFUNG ===
if [ -z "$1" ]; then
  echo "‚ùå Fehler: Bitte gib einen Projektnamen an: projectnew <projektname>"
  exit 1
fi

PROJECT_NAME=$1
ZIELORDNER="$PROJEKTPFAD/$PROJECT_NAME"

# === .env einlesen ===
SUPABASE_URL=$(grep SUPABASE_URL .env | cut -d '=' -f2-)
SUPABASE_SERVICE_ROLE=$(grep SUPABASE_SERVICE_ROLE .env | cut -d '=' -f2-)
SUPABASE_USER_MAIL=$(grep SUPABASE_USER_MAIL .env | cut -d '=' -f2-)

if [[ -z "$SUPABASE_URL" || -z "$SUPABASE_SERVICE_ROLE" || -z "$SUPABASE_USER_MAIL" ]]; then
  echo "‚ùå Fehlende Eintr√§ge in .env! (SUPABASE_URL, SUPABASE_SERVICE_ROLE, SUPABASE_USER_MAIL)"
  exit 1
fi

# === TEAMMITGLIEDER ABFRAGEN ===
echo -n "üë• Namen der Teammitglieder (z. B. Max Muster, Anna Beispiel, ...): "
read TEAM_NAMES

# === F√§lligkeitsdatum abfragen ===
echo -n "üìÖ F√§lligkeitsdatum (Format: YYYY-MM-DD): "
read DUE_DATE

# === MEILENSTEIN STATUS ABFRAGEN ===
echo -n "üìå Der Team-Status (z. B. in Vorbereitung, bereit, wird organisiert, etc.): "
read MILESTONE_STATUS


# === SCHRITT 1: Verzeichnis erstellen ===
echo "üì¶ Erstelle Projekt: $PROJECT_NAME in $ZIELORDNER ..."
mkdir -p "$ZIELORDNER"
cd "$ZIELORDNER" || exit

# === SCHRITT 2: Template klonen ===
echo "üì• Klone Template..."
git clone "$TEMPLATE_REPO" .
rm -rf .git
git init
git add .
git commit -m "üÜï Neues Projekt aus Template: $PROJECT_NAME"

# === SCHRITT 3: .gitignore anlegen/erg√§nzen ===
echo "üõ°Ô∏è  Erstelle oder erg√§nze .gitignore..."
touch .gitignore
for entry in ".env" ".DS_Store" "node_modules"; do
  grep -qxF "$entry" .gitignore || echo "$entry" >> .gitignore
done
rm -rf .DS_Store node_modules > /dev/null 2>&1

# === SICHERHEIT: Pr√ºfe, ob .env au√üerhalb ignoriert wird ===
ENV_PATH="../.env"
PARENT_GITIGNORE="../.gitignore"

if [[ -f "$ENV_PATH" ]]; then
  if [[ -f "$PARENT_GITIGNORE" ]]; then
    if ! grep -qxF ".env" "$PARENT_GITIGNORE"; then
      echo "üö® WARNUNG: Du hast eine .env-Datei in '$ENV_PATH', aber sie wird nicht ignoriert!"
      echo "üëâ Bitte f√ºge '.env' zur Datei '$PARENT_GITIGNORE' hinzu, um sie zu sch√ºtzen."
      echo "‚ö†Ô∏è Push wird abgebrochen."
      exit 1
    fi
  else
    echo "üö® WARNUNG: Es existiert eine .env-Datei im √ºbergeordneten Verzeichnis,"
    echo "aber keine .gitignore dort ‚Äì deine Umgebungsvariablen k√∂nnten geleakt werden!"
    echo "üëâ Bitte erstelle '$PARENT_GITIGNORE' mit dem Eintrag '.env'."
    echo "‚ö†Ô∏è Push wird abgebrochen."
    exit 1
  fi
fi


git add .gitignore
git commit -m "üõ°Ô∏è Erg√§nze .gitignore f√ºr Sicherheit und Ordnung"

# === SCHRITT 4: GitHub-Repo erstellen ===
echo "üåê Erstelle GitHub-Repository..."
RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Content-Type: application/json" \
  -d "{\"name\":\"$PROJECT_NAME\", \"private\":false}" \
  "$GITHUB_API/user/repos")

if [ "$RESPONSE" = "201" ]; then
  echo "‚úÖ GitHub-Repo erstellt: https://github.com/$USERNAME/$PROJECT_NAME"
else
  echo "‚ùå Fehler beim Erstellen des GitHub-Repos (Statuscode $RESPONSE)"
  exit 1
fi

# === SCHRITT 5: Remote setzen und pushen ===
git remote add origin "https://github.com/$USERNAME/$PROJECT_NAME.git"
git branch -M main
git push -u origin main

# === SCHRITT 6: Nutzer-ID von Supabase holen ===
echo "üë§ Ermittle Nutzer-ID zu $SUPABASE_USER_MAIL ..."
USER_ID=$(curl -s \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  "$SUPABASE_URL/rest/v1/user_profiles?email=eq.$SUPABASE_USER_MAIL" | jq -r '.[0].id')

if [[ -z "$USER_ID" || "$USER_ID" == "null" ]]; then
  echo "‚ùå Fehler: Nutzer nicht gefunden!"
  exit 1
fi

# === SCHRITT 7: Projekt registrieren ===

echo "üß¨ Registriere Projekt in Supabase..."
PROJECT_DESC="${2:-"Neues SE-Projekt erstellt via Script"}"
PROJECT_JSON=$(jq -n \
  --arg name "$PROJECT_NAME" \
  --arg startdatum "$(date +%F)" \
  --arg user_id "$USER_ID" \
  --arg status "angemeldet" \
  '{name: $name, status: $status, startdatum: $startdatum, owner_id: $user_id}')

PROJECT_RESPONSE=$(curl -s \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  -H "Content-Type: application/json" \
  -H "Prefer: return=representation" \
  -d "$PROJECT_JSON" \
  "$SUPABASE_URL/rest/v1/projects")
# Ausgabe des Projekt-Responses
  echo "$PROJECT_RESPONSE" | jq


# ID extrahieren f√ºr Metadaten-Eintrag
PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.[0].id')

if [[ -z "$PROJECT_ID" || "$PROJECT_ID" == "null" ]]; then
  echo "‚ùå Fehler: Projekt konnte nicht registriert werden!"
  exit 1
fi

# === SCHRITT 8: Metadaten als erster Meilenstein ===
echo "üß± Erstelle initialen Meilenstein (Metadaten)..."
MILESTONE_JSON=$(jq -n \
  --arg project_id "$PROJECT_ID" \
  --arg title "Team: $TEAM_NAMES"  \
  --arg description "https://github.com/$USERNAME/$PROJECT_NAME | $PROJECT_DESC" \
  --arg due_date "$DUE_DATE" \
  --arg status "$MILESTONE_STATUS" \
  '{project_id: $project_id, title: $title, description: $description, due_date: $due_date, status: $status}')

curl -s \
  -H "apikey: $SUPABASE_SERVICE_ROLE" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE" \
  -H "Content-Type: application/json" \
  -d "$MILESTONE_JSON" \
  "$SUPABASE_URL/rest/v1/milestones"

# === Editor starten ===
if command -v code &> /dev/null; then
  code .
fi

echo "üéâ Projekt '$PROJECT_NAME' ist bereit! (inkl. Frontend-Eintrag, GitHub-Repo, CI/CD)"
echo "üîó GitHub: https://github.com/$USERNAME/$PROJECT_NAME"
echo "üîó Frontend-Dashboard: https://frontend-se-cyan.vercel.app"