#!/usr/bin/env bash
# setup-supabase-secrets ‚Äì einmalig durch Admin ausf√ºhren
# Speichert SUPABASE_URL & SUPABASE_SERVICE_ROLE sicher (macOS Keychain / Linux Secret Service / Windows DPAPI)

set -euo pipefail
IFS=$'\n\t'

SVC_URL="SUPABASE_URL"
SVC_ROLE="SUPABASE_SERVICE_ROLE"

detect_os() {
  case "$(uname -s | tr '[:upper:]' '[:lower:]')" in
    darwin*)   echo "macos" ;;
    linux*)    echo "linux" ;;
    msys*|mingw*|cygwin*) echo "windows" ;;
    *)         echo "unknown" ;;
  esac
}

prompt_secret() {
  local label="$1" var
  read -r -p "$label: " var
  echo -n "$var"
}

prompt_secret_hidden() {
  local label="$1" var
  read -r -s -p "$label: " var; echo
  echo -n "$var"
}

store_macos() {
  local url="$1" role="$2"
  security add-generic-password -a "$USER" -s "$SVC_URL"  -w "$url"  -U >/dev/null 2>&1 || true
  security add-generic-password -a "$USER" -s "$SVC_ROLE" -w "$role" -U >/dev/null 2>&1 || true
  echo "üîê Gespeichert in macOS Keychain."
}

store_linux() {
  local url="$1" role="$2"
  if command -v secret-tool >/dev/null 2>&1; then
    printf %s "$url"  | secret-tool store --label='se-tools' service "$SVC_URL"  account "$USER"
    printf %s "$role" | secret-tool store --label='se-tools' service "$SVC_ROLE" account "$USER"
    echo "üîê Gespeichert in Secret Service (secret-tool)."
  else
    mkdir -p "$HOME/.config/se-tools"; chmod 700 "$HOME/.config/se-tools"
    umask 177
    printf %s "$url"  > "$HOME/.config/se-tools/${SVC_URL}.txt"
    printf %s "$role" > "$HOME/.config/se-tools/${SVC_ROLE}.txt"
    chmod 600 "$HOME/.config/se-tools/${SVC_URL}.txt" "$HOME/.config/se-tools/${SVC_ROLE}.txt"
    echo "‚ö†Ô∏è secret-tool nicht gefunden ‚Äì als 600-Dateien abgelegt (Fallback)."
  fi
}

store_windows() {
  local url="$1" role="$2"
  local ps='
    param([string]$Url,[string]$Role)
    New-Item -ItemType Directory -Force $env:APPDATA\se-tools | Out-Null
    $secU = ConvertTo-SecureString $Url  -AsPlainText -Force
    $encU = $secU | ConvertFrom-SecureString
    Set-Content $env:APPDATA\se-tools\SUPABASE_URL.txt $encU
    $secR = ConvertTo-SecureString $Role -AsPlainText -Force
    $encR = $secR | ConvertFrom-SecureString
    Set-Content $env:APPDATA\se-tools\SUPABASE_SERVICE_ROLE.txt $encR
  '
  powershell.exe -NoProfile -Command "$ps" -Url "$url" -Role "$role" >/dev/null 2>&1 || {
    echo "‚ùå PowerShell-Aufruf fehlgeschlagen."; exit 1;
  }
  echo "üîê Gespeichert mit DPAPI in %APPDATA%\\se-tools\\*.txt"
}

main() {
  local OS="$(detect_os)"
  if [[ "$OS" == "unknown" ]]; then
    echo "‚ùå Nicht unterst√ºtztes OS."; exit 1
  fi

  echo "‚Üí Supabase-Parameter einmalig setzen (nur Admin):"
  local URL ROLE
  URL="$(prompt_secret 'SUPABASE_URL (z.B. https://<your>.supabase.co)')"
  ROLE="$(prompt_secret_hidden 'SUPABASE_SERVICE_ROLE (JWT)')"

  [[ -z "$URL" || -z "$ROLE" ]] && { echo "‚ùå Beide Werte erforderlich."; exit 1; }

  case "$OS" in
    macos)   store_macos "$URL" "$ROLE" ;;
    linux)   store_linux "$URL" "$ROLE" ;;
    windows) store_windows "$URL" "$ROLE" ;;
  esac

  echo "‚úÖ Fertig. Nutzer k√∂nnen jetzt mit 'projectnew <name>' + E-Mail Projekte anlegen."
}

main "$@"
